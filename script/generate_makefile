#!/bin/python3

"""
This script generates a Makefile and runs it. It should be inside the 'scripts'
folder. It expects a src folder containing all the '.c' files and an include
folder containing all the '.h' files.
"""

import os
import textwrap
import datetime
import inspect

"""
Utilities
"""
def print_in_red(text):
    print("\033[91m{}\033[0m".format(text))

def print_in_green(text):
    print("\033[92m{}\033[0m".format(text))

"""
Helper Functions
"""
def get_minishell_root_dir():
	if os.getcwd().endswith("minishell"):
		return (os.getcwd())
	elif os.getcwd().endswith("scripts"):
		return (os.path.dirname(os.getcwd()))
	else:
		print_in_red("Oops! You should call this script from either the \"minishell\" or \"scripts\" folder. Aborting!")
		quit(1)

def get_minishell_src_dir():
	return (os.path.join(minishell_root_dir, 'src'))

def get_lib_dir():
	return (os.path.join(minishell_root_dir, 'lib'))

def get_minishell_include_dir():
	lib = get_lib_dir()
	include = ""
	for root, dirs, files in os.walk(lib):
		for dir in dirs:
			for root, dirs, files in os.walk(os.path.join(lib, dir)):
				for file in files:
					print(file)
			print(dir)
	return (os.path.join(minishell_root_dir, 'include'))

def get_minishell_sources():
	minishell_sources = ""
	for root, dirs, files in os.walk(minishell_src_dir):
		dirname = ""
		while not root.endswith('src'):
			dirname = os.path.join(os.path.basename(root), dirname)
			root = os.path.dirname(root)
		dirname = os.path.join('src', dirname)
		for file in files:
			if file.endswith('.c'):
				basename = os.path.basename(file)
				minishell_sources += f'\t\t\t\t\t\t{os.path.join(dirname, basename)} \\\n'
	minishell_sources = minishell_sources[5:]
	minishell_sources = minishell_sources[:-3]
	minishell_sources += '\n'
	return (minishell_sources)

def get_minishell_objects():
	return (minishell_sources.replace('.c', '.o'))

def get_minishell_headers():
	minishell_headers = ""
	for root, dirs, files in os.walk(minishell_include_dir):
		for file in files:
			if file.endswith('.h'):
				basename = os.path.basename(file)
				minishell_headers += f'\t\t\t\t\t\tinclude/{basename} \\\n'
	minishell_headers = minishell_headers[5:]
	minishell_headers = minishell_headers[:-3]
	minishell_headers += '\n'
	return (minishell_headers)

def get_minishell_depends():
	return (minishell_sources.replace('.c', '.d'))

def get_minishell_includes():
	minishell_includes = ""
	minishell_includes += f'\t\t\t\t\t\t-iquote include \\\n'
	minishell_includes = minishell_includes[5:]
	minishell_includes = minishell_includes[:-3]
	return (minishell_includes)

"""
Initialization
"""
username = "bhildebr"
minishell_root_dir = get_minishell_root_dir()
minishell_src_dir = get_minishell_src_dir()
minishell_include_dir = get_minishell_include_dir()
minishell_sources = get_minishell_sources()
minishell_objects = get_minishell_objects()
minishell_headers = get_minishell_headers()
minishell_depends = get_minishell_depends()
minishell_includes = get_minishell_includes()
current_datetime = datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')

"""
Main Functions
"""
def generate_minishell_makefile():
	makefile_content = textwrap.dedent(f"""
				# **************************************************************************** #
				#                                                                              #
				#                                                         :::      ::::::::    #
				#    Makefile                                           :+:      :+:    :+:    #
				#                                                     +:+ +:+         +:+      #
				#    By: {format(f'{username} <{username}@student.42.fr>', '<42')} +#+  +:+       +#+         #
				#                                                 +#+#+#+#+#+   +#+            #
				#    Created: {current_datetime} by {format(username, '<17')} #+#    #+#              #
				#    Updated: {current_datetime} by {format(username, '<16')} ###   ########.fr        #
				#                                                                              #
				# **************************************************************************** #

				NAME = minishell

				CC = gcc
				CFLAGS = -Wall -Wextra -Werror -g -MMD -MP
				LIBS = -lreadline -llua5.4

				minishell_sources = {minishell_sources}
				minishell_objects = {minishell_objects}
				minishell_headers = {minishell_headers}
				minishell_depends = {minishell_depends}
				minishell_includes = {minishell_includes}

				all:
					@./script/generate_makefile > /dev/null 2>&1
					@$(MAKE) --no-print-directory $(NAME) 2>&1
				
				$(NAME): $(minishell_objects)
					$(CC) $(CFLAGS) $(minishell_objects) $(minishell_includes) -o $(NAME) $(LIBS)

				%.o: %.c
					$(CC) $(CFLAGS) $(minishell_includes) -c $< -o $@
				
				clean:
					$(RM) $(minishell_objects) $(minishell_depends)

				fclean: clean
					$(RM) $(NAME)

				re: fclean all

				norm: 
					@norminette -R CheckForbiddenSourceHeader

				val:
					valgrind --leak-check=full --trace-children=yes --show-leak-kinds=all --suppressions=readline.supp ./$(NAME)

				run: all
					@./minishell

				make:
					@./script/generate_makefile > /dev/null 2>&1

				-include $(minishell_depends)

				.PHONY: all clean fclean re norm val run make
			""").strip('\n');
	try:
		with open(os.path.join(minishell_root_dir, 'Makefile'), 'w') as file:
			file.write(makefile_content)
	except Exception:
		print_in_red(f"Oops! Something went wrong in line {inspect.currentframe().f_lineno}")

if __name__ == "__main__":
	generate_minishell_makefile()
	print_in_green("Done!")